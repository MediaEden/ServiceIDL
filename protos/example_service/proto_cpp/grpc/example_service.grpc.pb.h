// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: example_service.proto
#ifndef GRPC_example_5fservice_2eproto__INCLUDED
#define GRPC_example_5fservice_2eproto__INCLUDED

#include "example_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace examples_service {

class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "examples_service.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Unary RPCs
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::examples_service::HelloResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::examples_service::HelloResponse>> AsyncSayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::examples_service::HelloResponse>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::examples_service::HelloResponse>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::examples_service::HelloResponse>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    // Server Streaming RPCs
    std::unique_ptr< ::grpc::ClientReaderInterface< ::examples_service::HelloResponse>> LotsOfReplies(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::examples_service::HelloResponse>>(LotsOfRepliesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::examples_service::HelloResponse>> AsyncLotsOfReplies(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::examples_service::HelloResponse>>(AsyncLotsOfRepliesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::examples_service::HelloResponse>> PrepareAsyncLotsOfReplies(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::examples_service::HelloResponse>>(PrepareAsyncLotsOfRepliesRaw(context, request, cq));
    }
    // Client Streaming RPCs
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> LotsOfGreetings(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(LotsOfGreetingsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> AsyncLotsOfGreetings(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(AsyncLotsOfGreetingsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> PrepareAsyncLotsOfGreetings(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(PrepareAsyncLotsOfGreetingsRaw(context, cq));
    }
    // Bidirectional Streaming RPCs
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> BidiHello(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(BidiHelloRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> AsyncBidiHello(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(AsyncBidiHelloRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> PrepareAsyncBidiHello(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(PrepareAsyncBidiHelloRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Unary RPCs
      virtual void SayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest* request, ::examples_service::HelloResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest* request, ::examples_service::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Server Streaming RPCs
      virtual void LotsOfReplies(::grpc::ClientContext* context, const ::examples_service::HelloRequest* request, ::grpc::ClientReadReactor< ::examples_service::HelloResponse>* reactor) = 0;
      // Client Streaming RPCs
      virtual void LotsOfGreetings(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::examples_service::HelloRequest,::examples_service::HelloResponse>* reactor) = 0;
      // Bidirectional Streaming RPCs
      virtual void BidiHello(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::examples_service::HelloRequest,::examples_service::HelloResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::examples_service::HelloResponse>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::examples_service::HelloResponse>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::examples_service::HelloResponse>* LotsOfRepliesRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::examples_service::HelloResponse>* AsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::examples_service::HelloResponse>* PrepareAsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* LotsOfGreetingsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* AsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* PrepareAsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* BidiHelloRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* AsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* PrepareAsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::examples_service::HelloResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::examples_service::HelloResponse>> AsyncSayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::examples_service::HelloResponse>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::examples_service::HelloResponse>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::examples_service::HelloResponse>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::examples_service::HelloResponse>> LotsOfReplies(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::examples_service::HelloResponse>>(LotsOfRepliesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::examples_service::HelloResponse>> AsyncLotsOfReplies(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::examples_service::HelloResponse>>(AsyncLotsOfRepliesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::examples_service::HelloResponse>> PrepareAsyncLotsOfReplies(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::examples_service::HelloResponse>>(PrepareAsyncLotsOfRepliesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> LotsOfGreetings(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(LotsOfGreetingsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> AsyncLotsOfGreetings(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(AsyncLotsOfGreetingsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> PrepareAsyncLotsOfGreetings(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(PrepareAsyncLotsOfGreetingsRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> BidiHello(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(BidiHelloRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> AsyncBidiHello(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(AsyncBidiHelloRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>> PrepareAsyncBidiHello(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>>(PrepareAsyncBidiHelloRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest* request, ::examples_service::HelloResponse* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::examples_service::HelloRequest* request, ::examples_service::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LotsOfReplies(::grpc::ClientContext* context, const ::examples_service::HelloRequest* request, ::grpc::ClientReadReactor< ::examples_service::HelloResponse>* reactor) override;
      void LotsOfGreetings(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::examples_service::HelloRequest,::examples_service::HelloResponse>* reactor) override;
      void BidiHello(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::examples_service::HelloRequest,::examples_service::HelloResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::examples_service::HelloResponse>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::examples_service::HelloResponse>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::examples_service::HelloResponse>* LotsOfRepliesRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request) override;
    ::grpc::ClientAsyncReader< ::examples_service::HelloResponse>* AsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::examples_service::HelloResponse>* PrepareAsyncLotsOfRepliesRaw(::grpc::ClientContext* context, const ::examples_service::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* LotsOfGreetingsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* AsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* PrepareAsyncLotsOfGreetingsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* BidiHelloRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* AsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* PrepareAsyncBidiHelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_LotsOfReplies_;
    const ::grpc::internal::RpcMethod rpcmethod_LotsOfGreetings_;
    const ::grpc::internal::RpcMethod rpcmethod_BidiHello_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Unary RPCs
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::examples_service::HelloRequest* request, ::examples_service::HelloResponse* response);
    // Server Streaming RPCs
    virtual ::grpc::Status LotsOfReplies(::grpc::ServerContext* context, const ::examples_service::HelloRequest* request, ::grpc::ServerWriter< ::examples_service::HelloResponse>* writer);
    // Client Streaming RPCs
    virtual ::grpc::Status LotsOfGreetings(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* stream);
    // Bidirectional Streaming RPCs
    virtual ::grpc::Status BidiHello(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::examples_service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::examples_service::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::examples_service::HelloResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::grpc::ServerWriter< ::examples_service::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLotsOfReplies(::grpc::ServerContext* context, ::examples_service::HelloRequest* request, ::grpc::ServerAsyncWriter< ::examples_service::HelloResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LotsOfGreetings() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLotsOfGreetings(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BidiHello() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidiHello(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_LotsOfReplies<WithAsyncMethod_LotsOfGreetings<WithAsyncMethod_BidiHello<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::examples_service::HelloRequest, ::examples_service::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::examples_service::HelloRequest* request, ::examples_service::HelloResponse* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::MessageAllocator< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::examples_service::HelloRequest, ::examples_service::HelloResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::examples_service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::examples_service::HelloResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::examples_service::HelloRequest, ::examples_service::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::examples_service::HelloRequest* request) { return this->LotsOfReplies(context, request); }));
    }
    ~WithCallbackMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::grpc::ServerWriter< ::examples_service::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::examples_service::HelloResponse>* LotsOfReplies(
      ::grpc::CallbackServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LotsOfGreetings() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::examples_service::HelloRequest, ::examples_service::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->LotsOfGreetings(context); }));
    }
    ~WithCallbackMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* LotsOfGreetings(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BidiHello() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::examples_service::HelloRequest, ::examples_service::HelloResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->BidiHello(context); }));
    }
    ~WithCallbackMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::examples_service::HelloRequest, ::examples_service::HelloResponse>* BidiHello(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SayHello<WithCallbackMethod_LotsOfReplies<WithCallbackMethod_LotsOfGreetings<WithCallbackMethod_BidiHello<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::examples_service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::grpc::ServerWriter< ::examples_service::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LotsOfGreetings() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BidiHello() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::examples_service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::grpc::ServerWriter< ::examples_service::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLotsOfReplies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LotsOfGreetings() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLotsOfGreetings(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BidiHello() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidiHello(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~WithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::examples_service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->LotsOfReplies(context, request); }));
    }
    ~WithRawCallbackMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::grpc::ServerWriter< ::examples_service::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* LotsOfReplies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LotsOfGreetings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LotsOfGreetings() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->LotsOfGreetings(context); }));
    }
    ~WithRawCallbackMethod_LotsOfGreetings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LotsOfGreetings(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* LotsOfGreetings(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BidiHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BidiHello() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->BidiHello(context); }));
    }
    ~WithRawCallbackMethod_BidiHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiHello(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::examples_service::HelloResponse, ::examples_service::HelloRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidiHello(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::examples_service::HelloRequest, ::examples_service::HelloResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::examples_service::HelloRequest, ::examples_service::HelloResponse>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::examples_service::HelloResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::examples_service::HelloRequest,::examples_service::HelloResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_LotsOfReplies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LotsOfReplies() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::examples_service::HelloRequest, ::examples_service::HelloResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::examples_service::HelloRequest, ::examples_service::HelloResponse>* streamer) {
                       return this->StreamedLotsOfReplies(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_LotsOfReplies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LotsOfReplies(::grpc::ServerContext* /*context*/, const ::examples_service::HelloRequest* /*request*/, ::grpc::ServerWriter< ::examples_service::HelloResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLotsOfReplies(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::examples_service::HelloRequest,::examples_service::HelloResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_LotsOfReplies<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithSplitStreamingMethod_LotsOfReplies<Service > > StreamedService;
};

}  // namespace examples_service


#endif  // GRPC_example_5fservice_2eproto__INCLUDED
